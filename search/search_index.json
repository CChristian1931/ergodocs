{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Ergo Platform Documentation! Ergo uses continous integration, meaning best practices dictate that the majority of the documentation should be kept on the assosciated repositories themselves. this site aims to serve as a directory that guides the user on their development journey. Documentation within the naviation tabs above is split into four distinct categories. Tutorials How-To Guides Explanations References Read more about the format used on this website. Other resources awesome-ergo ergonaut.space ergosites.github","title":"Home"},{"location":"#welcome-to-the-ergo-platform-documentation","text":"Ergo uses continous integration, meaning best practices dictate that the majority of the documentation should be kept on the assosciated repositories themselves. this site aims to serve as a directory that guides the user on their development journey. Documentation within the naviation tabs above is split into four distinct categories. Tutorials How-To Guides Explanations References Read more about the format used on this website.","title":"Welcome to the Ergo Platform Documentation!"},{"location":"#other-resources","text":"awesome-ergo ergonaut.space ergosites.github","title":"Other resources"},{"location":"About/ergo/","text":"About Ergo Ergo builds advanced cryptographic features and radically new DeFi functionality on the rock-solid foundations laid by a decade of blockchain theory and development. It complements tried and tested principles with the latest peer-reviewed academic research into cryptography, consensus models and digital currencies. Ergo is a unique Proof-of-Work (PoW) cryptocurrency and DeFi platform, building on the first principles of Bitcoin. With a research-driven but practical development model, Ergo has prioritized useful features without compromising on security. The platform's smart contracts are built on the extended UTXO (eUTXO) model with a unique data input concept, offering a radically different approach to provide robust, flexible cryptography and easy, safe scripting on privacy-centric Sigma Protocols (non-interactive zero-knowledge proofs). Storage rent (~.13 erg every 4 years) for long-term survivability, ultra-efficient light clients , and NiPoPoW technology for interoperability. Contractual Money The cryptographic part of Ergo script is based on Sigma Protocols and naturally supports threshold m-of-n signatures, ring signatures and more. Keeping all this in mind, we expect ErgoScript and Ergo\u2019s design to be uniquely useful as Contractual Money with countless possible applications. The overwhelming majority of successful public blockchain use\u2010cases are related to financial applications. Ergo extends Bitcoin\u2019s way of writing contracts by attaching a guard script (together with additional custom data) to every coin. For example, in addition to regular protection by some m\u2010of\u2010n signature, Ergo allows specifying the possible recipients of these coins, which may also be a contract with similar complex conditions. This \"chaining\" approach allows the implementation of secure and efficient contracts of arbitrary complexity. This, along with Ergo's focus on sustainability is what makes it uniquely useful as contractual money. The scripting language in itself is non-Turing complete but applications ran on the platform can be made to be Turing complete as demonstrated in this peer-reviewed paper All cryptocurrencies rely on contributions from the scientific research community. Ergo brings it in its core! The Manifesto Cryptocurrency should provide tools to enrich ordinary people. Their small businesses providing no much above making ends meet, not depersonalized big financial capital. This is what inspired me. This is my dream. See the Ergo Manifesto","title":"About Ergo"},{"location":"About/ergo/#about-ergo","text":"Ergo builds advanced cryptographic features and radically new DeFi functionality on the rock-solid foundations laid by a decade of blockchain theory and development. It complements tried and tested principles with the latest peer-reviewed academic research into cryptography, consensus models and digital currencies. Ergo is a unique Proof-of-Work (PoW) cryptocurrency and DeFi platform, building on the first principles of Bitcoin. With a research-driven but practical development model, Ergo has prioritized useful features without compromising on security. The platform's smart contracts are built on the extended UTXO (eUTXO) model with a unique data input concept, offering a radically different approach to provide robust, flexible cryptography and easy, safe scripting on privacy-centric Sigma Protocols (non-interactive zero-knowledge proofs). Storage rent (~.13 erg every 4 years) for long-term survivability, ultra-efficient light clients , and NiPoPoW technology for interoperability.","title":"About Ergo"},{"location":"About/ergo/#contractual-money","text":"The cryptographic part of Ergo script is based on Sigma Protocols and naturally supports threshold m-of-n signatures, ring signatures and more. Keeping all this in mind, we expect ErgoScript and Ergo\u2019s design to be uniquely useful as Contractual Money with countless possible applications. The overwhelming majority of successful public blockchain use\u2010cases are related to financial applications. Ergo extends Bitcoin\u2019s way of writing contracts by attaching a guard script (together with additional custom data) to every coin. For example, in addition to regular protection by some m\u2010of\u2010n signature, Ergo allows specifying the possible recipients of these coins, which may also be a contract with similar complex conditions. This \"chaining\" approach allows the implementation of secure and efficient contracts of arbitrary complexity. This, along with Ergo's focus on sustainability is what makes it uniquely useful as contractual money. The scripting language in itself is non-Turing complete but applications ran on the platform can be made to be Turing complete as demonstrated in this peer-reviewed paper All cryptocurrencies rely on contributions from the scientific research community. Ergo brings it in its core!","title":"Contractual Money"},{"location":"About/ergo/#the-manifesto","text":"Cryptocurrency should provide tools to enrich ordinary people. Their small businesses providing no much above making ends meet, not depersonalized big financial capital. This is what inspired me. This is my dream. See the Ergo Manifesto","title":"The Manifesto"},{"location":"About/events/","text":"ERGOHACK ERGOHACK I Hackerthon Jun 12th! ERGOHACK II ERGOHACK III ErgoSummit ErgoSummit I ErgoSummit Timestamps 00:00:00 - The Summit 00:01:00 - Ergo 101: The Basics 00:40:00 - Cardano & Ergo\u2019s UTXO Model 01:11:30 - DeFi Services: How Yoroi Wallet will be the gateway to Ergo dApps and what\u2019s to come 01:32:30 - Auction House 01:49:30 - Announcing The Release Of The AgeUSD Stablecoin Protocol 02:18:00 - An IOHK Perspective: Designing The AgeUSD Stablecoin Protocol - An Economic Analysis (with Special Guest IOHK\u2019s Bruno) 03:02:00 - AgeUSD Smart Contracts: A Technical Perspective 03:41:00 - Enter Into The Sigmaverse - Uncovering What Lays Within Ergo\u2019s dApp Ecosystem 03:47:30 - Ergo-Bootstrap - Streamlining Ergo dApp Infrastructure With One Simple Tool 03:59:30 - Headless dApps: A Novel Technical & Business Model for the dApp Industry 04:28:00 - Ergo - Cardano Collaboration 04:38:00 - Understanding dApp Developer Tooling: An Introduction To Kiosk [05:13:00] (https://www.youtube.com/watch?v=zG-rxMCDIa0&t=18780s) - The Upcoming Ergo Hardening Upgrade - How It Will Change The Ecosystem From Top To Bottom 05:26:30 - Oracle Pools Update - How Deviation Checking Consensus Improves Assurance 05:57:00 - Updatable dApps In The EUTXO Model 06:10:00 - Blockchain 2020: A DeFi Odyssey 06:51:00 - The Ergo Vision 07:03:00 - ZK Treasury 07:07:00 - Understanding dApp Developer Tooling: An Introduction To Json dApp Environment 07:45:30 - The Ergo Foundation\u2019s Grant-Based Approach To Developing The UTXO-Based dApp Ecosystem 08:05:30 - 2021 Ergo Roadmap reveal ErgoSummit II Q4 2021","title":"Events"},{"location":"About/events/#ergohack","text":"","title":"ERGOHACK"},{"location":"About/events/#ergohack-i","text":"Hackerthon Jun 12th!","title":"ERGOHACK I"},{"location":"About/events/#ergohack-ii","text":"","title":"ERGOHACK II"},{"location":"About/events/#ergohack-iii","text":"","title":"ERGOHACK III"},{"location":"About/events/#ergosummit","text":"","title":"ErgoSummit"},{"location":"About/events/#ergosummit-i","text":"","title":"ErgoSummit I"},{"location":"About/events/#ergosummit-timestamps","text":"00:00:00 - The Summit 00:01:00 - Ergo 101: The Basics 00:40:00 - Cardano & Ergo\u2019s UTXO Model 01:11:30 - DeFi Services: How Yoroi Wallet will be the gateway to Ergo dApps and what\u2019s to come 01:32:30 - Auction House 01:49:30 - Announcing The Release Of The AgeUSD Stablecoin Protocol 02:18:00 - An IOHK Perspective: Designing The AgeUSD Stablecoin Protocol - An Economic Analysis (with Special Guest IOHK\u2019s Bruno) 03:02:00 - AgeUSD Smart Contracts: A Technical Perspective 03:41:00 - Enter Into The Sigmaverse - Uncovering What Lays Within Ergo\u2019s dApp Ecosystem 03:47:30 - Ergo-Bootstrap - Streamlining Ergo dApp Infrastructure With One Simple Tool 03:59:30 - Headless dApps: A Novel Technical & Business Model for the dApp Industry 04:28:00 - Ergo - Cardano Collaboration 04:38:00 - Understanding dApp Developer Tooling: An Introduction To Kiosk [05:13:00] (https://www.youtube.com/watch?v=zG-rxMCDIa0&t=18780s) - The Upcoming Ergo Hardening Upgrade - How It Will Change The Ecosystem From Top To Bottom 05:26:30 - Oracle Pools Update - How Deviation Checking Consensus Improves Assurance 05:57:00 - Updatable dApps In The EUTXO Model 06:10:00 - Blockchain 2020: A DeFi Odyssey 06:51:00 - The Ergo Vision 07:03:00 - ZK Treasury 07:07:00 - Understanding dApp Developer Tooling: An Introduction To Json dApp Environment 07:45:30 - The Ergo Foundation\u2019s Grant-Based Approach To Developing The UTXO-Based dApp Ecosystem 08:05:30 - 2021 Ergo Roadmap reveal","title":"ErgoSummit Timestamps"},{"location":"About/events/#ergosummit-ii","text":"Q4 2021","title":"ErgoSummit II"},{"location":"About/faq/","text":"Basics What is the teams background? | Ergo is designed and implemented by a team of experienced developers and researchers, who hold publications and PhDs in cryptography, compiler theory, blockchain technology, and cryptographic e-cash. The team also has a solid background in core development with such cryptocurrencies and blockchain frameworks as Nxt, Scorex and Waves. Alexander 'kushti' Chepurnoy, was a co-founder of smartcontract.com (now Chainlink), a core developer at NXT (first PoS), and one of the first employees at IOHK, where he was a Research Fellow and Team Scorex Manager. The full team can be seen on Ergo's Hall of Fame . Why 'Ergo'? | \u201cErgo means \u201ctherefore\u201d in Latin, but \u201cwork\u201d in Greek. Initially, the name was chosen to point to the fact that the design of the cryptocurrency is ERGOnomical. What is the emission schedule? | Emission Schedule with a maximum supply of 97,739,925 Ergs, to be completed in 8 years after launch. When was Ergo launched? | July, 2019. The previous price spike was a different token (Ergo-First-Year-Token), if you view the chart by market-cap it is accurate. Where can I buy Erg? | KuCoin, CoinEx, TradeOgre, gate.io. Where can I store Erg? | Yoroi or the Android Wallet. Is there mobile support? | Android only currently, iOS in development Can we use a hardware wallet? | Ledger support underway. Workaround: You can move your Erg to waves.exchange and stake your erg through that. Can I stake ERG? | No, Ergo is a Proof of Work coin - you can however provide liquidity on either the CoinEx AMM pool (watch out for impermanent loss!), or SigmaUSD. However, dApp tokenisation is coming - A Solution for staking Ergo Foundation What is the Ergo Foundation? | The Ergo Foundation is a community-driven entity focused on: Promoting non-breaking development of Ergo Platform protocol; Promoting the widespread adoption and use of Ergo Platform and its native token (ERG); Developing the ecosystem around the Ergo Platform; Promoting the use of Ergo Platform and blockchain technology for social good; Supporting truly decentralized infrastructure, and; Supporting privacy as a basic human right. Deep Dives Ergo: Road to Top 10 ergonaut.space Infographics \u201cIt's one of the most revolutionary cryptocurrencies ever built. Got so many crazy ideas like sigma protocols and pruning the blockchain and roller chains. All this crazy stuff. Even has a proof of no premine. So really a technological marvel in many respects, and it reflects about 8 years of knowledge that Alex has amassed as both a researcher and a developer. Super concise code and it blows my mind that the market cap is where it's at. It should be a top 10 coin or top 15 coin\" \u2014 Charles Hoskinson Get some perspective Proof of Work Ergo was created for regular people, PoW allows for a fair start and true decentralistion. It's also widely studied, and has very high-security guarantees - which are essential for having useful contractual, programmable money that's ready today. Here's CH talking a bit about consensus Why Proof-of-Work? | It's tried and tested (the Lindy effect), and has some advantages over PoS. What about 51% attacks? | Not a significant problem, more pools are being added. Ergo's Efficiency and interplay with PoS - Discussion Can I mine ERG? | To mine, you will need a dedicated GPU (AMD/Intel), see this page on mining What will Erg bring to ADA? Features Storage Rent | After four years, miners can charge fees for unmoved erg. Stabilising miner income and preventing lost coins as we see in BTC. Sigma Protocols | Ergo\u2019s smart contracts and DeFi functionality are built on Sigma protocols \u2013 a powerful, flexible class of zero-knowledge proofs. Find out more about why they\u2019re so important, and how they put Ergo head and shoulders above the competition. eUTxO | Based on the UTXO model of Bitcoin, similar extended-UTXO model as Cardano, allowing interoperability. NiPoPoWs | Verify proof of work without downloading the headers. Enables light-clients during in places with poor internet - and light mining (not having to download the entire chain) dApps Ergo already has several functional decentralised applications | sigmaverse.io ErgoMixer | the first working non-custodial, programmable, non-interactive mixer in the cryptocurrency space . SigmaUSD | DAI-like Stablecoin - without liquidations. AuctionHouse | Working NFT marketplace. Oracle-Pools | More efficient and programmable than using multiple single oracle data points such as in Chainlink\u2019s oracle design. We build hierarchies of confidence using oracle pools and pools of oracle pools in Ergo. It\u2019s faster, cheaper, and more beneficial to the end-user. In-Development ErgoDex | Decentralised exchange that runs ontop ADA & ERG. ErgoFund | Crowdfunding on Ergo Use cases Ergo is one of the most sophisticated protocols in the space with stateless clients, NiPoPoWS for light clients, and easy miner-voting on parameter changes (e.g, block size) Ergo aims to provide an efficient, secure, and easy way to implement financial contracts that will be useful and survivable in the long term. There is plenty of uniqueness in Ergo but the most significant is probably Sigma protocols. These allow a true P2P system with privacy in mind. No one at the moment is able to build a trustless LETS system, multisig with no signers disclosure, trustless payment networks or has real ring signatures that preserve zero knowledge. Local Exchange Trading System - a local mutual credit association which members are allowed to create common credit money individually, with all the deals in the system written into a common ledger. To the best of our knowledge, this is the first implementation of such kind of community currency on top of a blockchain. LETS can be thought of as a mechanism to facilitate the velocity of trade, goods, and services out-with the existing monetary system, allowing us to create sustainable local economies. Smart contracts without gas fees. Ergo\u2019s native programming language \u2014 aka ErgoScript \u2014 enables the development of Turing complete contracts that completely bypass the need for any gas fee while providing other peripheral benefits such as estimation of script complexity before execution, a facet that helps in the active prevention of DoS attacks. Ergo.Meta - a unified set of design patterns for off-chain and sidechain solutions ErgoScript : a new advanced transactional language built from scratch by the team. Tutorials are available on the website /docs/AdvancedErgoScriptTutorial.pdf. It is a more advanced scripting language than Bitcoin while maintaining security and not introducing blockchain bloat problems. Scripting language in itself is non-Turing complete but applications ran on the platform can be made to be Turing complete as demonstrated in this peer-reviewed paper https://arxiv.org/pdf/1806.10116v1.pdf. Rigorous research and scientific approach : Ergo is based on original research, published at known peer-reviewed conferences. A list of scientific papers is available at here , but Ergo is not limited by research and it also implements other novel scientific ideas. Trustless Light Clients with Minimal Resource Requirements: Ergo block header supports NiPoPoWs that enable synchronizing network by downloading < 1Mb of data. This is further made possible by the fact Ergo state is authenticated as detailed in this paper from 2017 New Economic Model : Key feature of the new model is miners charge users a fee for any UTXO that remains unmoved for 4 years (\u201cstorage rent fee\u201d). This accomplishes stable mining revenue to secure the network, prevents \u201cstate bloat\u201d and enables a short release schedule \u2013 Ergo emission fully completes in just 8 years. Details in this paper Mined from Zero via PoW with no ICO or Pre-mine . It is about a hope to achieve a fair distribution of Ergs as possible to enhance decentralization. Decentralization First : Core commitment of Development team and community. Top item in \u201cErgo Vision\u201d section of white paper. Many of the above features\u2019 main purpose is to achieve this goal. Resiliency and Survivability : Decentralization First is to accomplish this goal. Ergo should be alive and operational for an indefinite amount of time and Contractual Money contracts on Ergo should be able to survive for at least the length of a person\u2019s lifetime despite a changing external environment. Privacy : Privacy is optional in Ergo, but it still beats a lot of privacy coins by default. You can actually put XMR on top, but Ergo itself can achieve privacy of early Monero if there are enough users of the mixers. Actually, it can be far better, as no inference scenarios are possible as described in this paper . Related: ErgoMixer Other : Ergo offers anyone the ability to issue their own tokens (non-native tokens) on the platform and leverage off its security and decentralization. Advanced on-chain governance is built with miners being able to vote on a number of parameters including simple items like block size \u2013 gradual changes only to ensure stability. Ergo follows a soft-forkability approach --- if an overwhelming majority of the network accepts a new feature, it is activated, however, old nodes which do not upgrade continue to operate normally and just skip over this feature validation. Thus disruptive hard forks should not be required in Ergo. Ergo mining will always be stable, unlike Bitcoin and other PoW currencies, in which mining may become unstable after the emission period. To achieve survivability, Ergo provides economic improvements in addition to the technical ones, most central of which is a storage fee component which plays an important role for Ergo\u2018s stability. Scalability The blocks in the Ergo Network are aimed to be produced at an interval of approx. 2 minutes. TPS itself doesn't matter much for Ergo in the long run since it has smart contracts in which you can chain hundreds of transactions within one. Ergo\u2019s solutions to transaction congestion are as follows: L0: A lot of efficiency improvements in the node have been completed starting from v4.0.8, 20-50x gains are still possible here. Quick bootstrapping using NiPoPoWs proofs and UTXO set snapshots are also planned L1: Ergo has an extension section in its code that allows the implementation of a wide variety of scaling solutions such as Sharding, Hydra, or BitcoinNG-style macroblocks. This even lets us do generic sidechains with velvet or soft forks. L2 (off-chain) - Ergo should be compatible with the Lightning Network, Rainbow Network, and many more. The implementation here will depend on the needs of the applications being built on Ergo. Ergo has stateless clients, NiPoPoWs - can put full nodes on Raspberry Pi's, make ultra-efficient SPV clients and other means to survive in the long-term even under the load. Storage rent helps to prevent spam & dust and stabilize mining income. Other benefits from having the storage rent fee include prevention of \"state bloat\", the building of an economy around the state (users must pay to keep unspent boxes in miners' memory for the long\u2010term) and a gradual return of any lost coins back into circulation. Partnerships / Business Development Yoroi dApp Connector | In Testing! Waves Partners with Ergo to foster Interoperability solutions | In Testing! Cryptocurrencycheckout: Supports both SigUSD and Ergo. Roadmap","title":"FAQ"},{"location":"About/faq/#basics","text":"What is the teams background? | Ergo is designed and implemented by a team of experienced developers and researchers, who hold publications and PhDs in cryptography, compiler theory, blockchain technology, and cryptographic e-cash. The team also has a solid background in core development with such cryptocurrencies and blockchain frameworks as Nxt, Scorex and Waves. Alexander 'kushti' Chepurnoy, was a co-founder of smartcontract.com (now Chainlink), a core developer at NXT (first PoS), and one of the first employees at IOHK, where he was a Research Fellow and Team Scorex Manager. The full team can be seen on Ergo's Hall of Fame . Why 'Ergo'? | \u201cErgo means \u201ctherefore\u201d in Latin, but \u201cwork\u201d in Greek. Initially, the name was chosen to point to the fact that the design of the cryptocurrency is ERGOnomical. What is the emission schedule? | Emission Schedule with a maximum supply of 97,739,925 Ergs, to be completed in 8 years after launch. When was Ergo launched? | July, 2019. The previous price spike was a different token (Ergo-First-Year-Token), if you view the chart by market-cap it is accurate. Where can I buy Erg? | KuCoin, CoinEx, TradeOgre, gate.io. Where can I store Erg? | Yoroi or the Android Wallet. Is there mobile support? | Android only currently, iOS in development Can we use a hardware wallet? | Ledger support underway. Workaround: You can move your Erg to waves.exchange and stake your erg through that. Can I stake ERG? | No, Ergo is a Proof of Work coin - you can however provide liquidity on either the CoinEx AMM pool (watch out for impermanent loss!), or SigmaUSD. However, dApp tokenisation is coming - A Solution for staking","title":"Basics"},{"location":"About/faq/#ergo-foundation","text":"What is the Ergo Foundation? | The Ergo Foundation is a community-driven entity focused on: Promoting non-breaking development of Ergo Platform protocol; Promoting the widespread adoption and use of Ergo Platform and its native token (ERG); Developing the ecosystem around the Ergo Platform; Promoting the use of Ergo Platform and blockchain technology for social good; Supporting truly decentralized infrastructure, and; Supporting privacy as a basic human right.","title":"Ergo Foundation"},{"location":"About/faq/#deep-dives","text":"Ergo: Road to Top 10 ergonaut.space Infographics \u201cIt's one of the most revolutionary cryptocurrencies ever built. Got so many crazy ideas like sigma protocols and pruning the blockchain and roller chains. All this crazy stuff. Even has a proof of no premine. So really a technological marvel in many respects, and it reflects about 8 years of knowledge that Alex has amassed as both a researcher and a developer. Super concise code and it blows my mind that the market cap is where it's at. It should be a top 10 coin or top 15 coin\" \u2014 Charles Hoskinson Get some perspective","title":"Deep Dives"},{"location":"About/faq/#proof-of-work","text":"Ergo was created for regular people, PoW allows for a fair start and true decentralistion. It's also widely studied, and has very high-security guarantees - which are essential for having useful contractual, programmable money that's ready today. Here's CH talking a bit about consensus Why Proof-of-Work? | It's tried and tested (the Lindy effect), and has some advantages over PoS. What about 51% attacks? | Not a significant problem, more pools are being added. Ergo's Efficiency and interplay with PoS - Discussion Can I mine ERG? | To mine, you will need a dedicated GPU (AMD/Intel), see this page on mining What will Erg bring to ADA?","title":"Proof of Work"},{"location":"About/faq/#features","text":"Storage Rent | After four years, miners can charge fees for unmoved erg. Stabilising miner income and preventing lost coins as we see in BTC. Sigma Protocols | Ergo\u2019s smart contracts and DeFi functionality are built on Sigma protocols \u2013 a powerful, flexible class of zero-knowledge proofs. Find out more about why they\u2019re so important, and how they put Ergo head and shoulders above the competition. eUTxO | Based on the UTXO model of Bitcoin, similar extended-UTXO model as Cardano, allowing interoperability. NiPoPoWs | Verify proof of work without downloading the headers. Enables light-clients during in places with poor internet - and light mining (not having to download the entire chain)","title":"Features"},{"location":"About/faq/#dapps","text":"Ergo already has several functional decentralised applications | sigmaverse.io ErgoMixer | the first working non-custodial, programmable, non-interactive mixer in the cryptocurrency space . SigmaUSD | DAI-like Stablecoin - without liquidations. AuctionHouse | Working NFT marketplace. Oracle-Pools | More efficient and programmable than using multiple single oracle data points such as in Chainlink\u2019s oracle design. We build hierarchies of confidence using oracle pools and pools of oracle pools in Ergo. It\u2019s faster, cheaper, and more beneficial to the end-user.","title":"dApps"},{"location":"About/faq/#in-development","text":"ErgoDex | Decentralised exchange that runs ontop ADA & ERG. ErgoFund | Crowdfunding on Ergo","title":"In-Development"},{"location":"About/faq/#use-cases","text":"Ergo is one of the most sophisticated protocols in the space with stateless clients, NiPoPoWS for light clients, and easy miner-voting on parameter changes (e.g, block size) Ergo aims to provide an efficient, secure, and easy way to implement financial contracts that will be useful and survivable in the long term. There is plenty of uniqueness in Ergo but the most significant is probably Sigma protocols. These allow a true P2P system with privacy in mind. No one at the moment is able to build a trustless LETS system, multisig with no signers disclosure, trustless payment networks or has real ring signatures that preserve zero knowledge. Local Exchange Trading System - a local mutual credit association which members are allowed to create common credit money individually, with all the deals in the system written into a common ledger. To the best of our knowledge, this is the first implementation of such kind of community currency on top of a blockchain. LETS can be thought of as a mechanism to facilitate the velocity of trade, goods, and services out-with the existing monetary system, allowing us to create sustainable local economies. Smart contracts without gas fees. Ergo\u2019s native programming language \u2014 aka ErgoScript \u2014 enables the development of Turing complete contracts that completely bypass the need for any gas fee while providing other peripheral benefits such as estimation of script complexity before execution, a facet that helps in the active prevention of DoS attacks. Ergo.Meta - a unified set of design patterns for off-chain and sidechain solutions ErgoScript : a new advanced transactional language built from scratch by the team. Tutorials are available on the website /docs/AdvancedErgoScriptTutorial.pdf. It is a more advanced scripting language than Bitcoin while maintaining security and not introducing blockchain bloat problems. Scripting language in itself is non-Turing complete but applications ran on the platform can be made to be Turing complete as demonstrated in this peer-reviewed paper https://arxiv.org/pdf/1806.10116v1.pdf. Rigorous research and scientific approach : Ergo is based on original research, published at known peer-reviewed conferences. A list of scientific papers is available at here , but Ergo is not limited by research and it also implements other novel scientific ideas. Trustless Light Clients with Minimal Resource Requirements: Ergo block header supports NiPoPoWs that enable synchronizing network by downloading < 1Mb of data. This is further made possible by the fact Ergo state is authenticated as detailed in this paper from 2017 New Economic Model : Key feature of the new model is miners charge users a fee for any UTXO that remains unmoved for 4 years (\u201cstorage rent fee\u201d). This accomplishes stable mining revenue to secure the network, prevents \u201cstate bloat\u201d and enables a short release schedule \u2013 Ergo emission fully completes in just 8 years. Details in this paper Mined from Zero via PoW with no ICO or Pre-mine . It is about a hope to achieve a fair distribution of Ergs as possible to enhance decentralization. Decentralization First : Core commitment of Development team and community. Top item in \u201cErgo Vision\u201d section of white paper. Many of the above features\u2019 main purpose is to achieve this goal. Resiliency and Survivability : Decentralization First is to accomplish this goal. Ergo should be alive and operational for an indefinite amount of time and Contractual Money contracts on Ergo should be able to survive for at least the length of a person\u2019s lifetime despite a changing external environment. Privacy : Privacy is optional in Ergo, but it still beats a lot of privacy coins by default. You can actually put XMR on top, but Ergo itself can achieve privacy of early Monero if there are enough users of the mixers. Actually, it can be far better, as no inference scenarios are possible as described in this paper . Related: ErgoMixer Other : Ergo offers anyone the ability to issue their own tokens (non-native tokens) on the platform and leverage off its security and decentralization. Advanced on-chain governance is built with miners being able to vote on a number of parameters including simple items like block size \u2013 gradual changes only to ensure stability. Ergo follows a soft-forkability approach --- if an overwhelming majority of the network accepts a new feature, it is activated, however, old nodes which do not upgrade continue to operate normally and just skip over this feature validation. Thus disruptive hard forks should not be required in Ergo. Ergo mining will always be stable, unlike Bitcoin and other PoW currencies, in which mining may become unstable after the emission period. To achieve survivability, Ergo provides economic improvements in addition to the technical ones, most central of which is a storage fee component which plays an important role for Ergo\u2018s stability.","title":"Use cases"},{"location":"About/faq/#scalability","text":"The blocks in the Ergo Network are aimed to be produced at an interval of approx. 2 minutes. TPS itself doesn't matter much for Ergo in the long run since it has smart contracts in which you can chain hundreds of transactions within one. Ergo\u2019s solutions to transaction congestion are as follows: L0: A lot of efficiency improvements in the node have been completed starting from v4.0.8, 20-50x gains are still possible here. Quick bootstrapping using NiPoPoWs proofs and UTXO set snapshots are also planned L1: Ergo has an extension section in its code that allows the implementation of a wide variety of scaling solutions such as Sharding, Hydra, or BitcoinNG-style macroblocks. This even lets us do generic sidechains with velvet or soft forks. L2 (off-chain) - Ergo should be compatible with the Lightning Network, Rainbow Network, and many more. The implementation here will depend on the needs of the applications being built on Ergo. Ergo has stateless clients, NiPoPoWs - can put full nodes on Raspberry Pi's, make ultra-efficient SPV clients and other means to survive in the long-term even under the load. Storage rent helps to prevent spam & dust and stabilize mining income. Other benefits from having the storage rent fee include prevention of \"state bloat\", the building of an economy around the state (users must pay to keep unspent boxes in miners' memory for the long\u2010term) and a gradual return of any lost coins back into circulation.","title":"Scalability"},{"location":"About/faq/#partnerships-business-development","text":"Yoroi dApp Connector | In Testing! Waves Partners with Ergo to foster Interoperability solutions | In Testing! Cryptocurrencycheckout: Supports both SigUSD and Ergo. Roadmap","title":"Partnerships / Business Development"},{"location":"About/format/","text":"Format Tutorials learning-oriented. Tutorial are lessons that take the reader by the hand through a series of steps to complete a project. Most important part of documentation, rarely done well. What matters? Learn by doing. Getting Started Inspiring Confidence Repeatability Immediate sense of achievement Concreteness, not abstraction Minimum necessary explanation No distractions How To Guides problem-oriented. Guides that take the user through a series of steps to achieve a common problem. What matters? A series of steps A focus on the goal Addressing a specific question A little flexibility Practical usability Good naming Explanations Understanding-orientated Explanations that clarify and illuminate a particular topic What Matters? Giving context Explaning why Multiple examples, alternative approaches Making Connections No instruction or technical description References Technical descriptions and how to operate it. What Matters? Structure Consistency Description Accuracy","title":"About ErgoDocs"},{"location":"About/format/#format","text":"","title":"Format"},{"location":"About/format/#tutorials","text":"learning-oriented. Tutorial are lessons that take the reader by the hand through a series of steps to complete a project. Most important part of documentation, rarely done well.","title":"Tutorials"},{"location":"About/format/#what-matters","text":"Learn by doing. Getting Started Inspiring Confidence Repeatability Immediate sense of achievement Concreteness, not abstraction Minimum necessary explanation No distractions","title":"What matters?"},{"location":"About/format/#how-to-guides","text":"problem-oriented. Guides that take the user through a series of steps to achieve a common problem.","title":"How To Guides"},{"location":"About/format/#what-matters_1","text":"A series of steps A focus on the goal Addressing a specific question A little flexibility Practical usability Good naming","title":"What matters?"},{"location":"About/format/#explanations","text":"Understanding-orientated Explanations that clarify and illuminate a particular topic","title":"Explanations"},{"location":"About/format/#what-matters_2","text":"Giving context Explaning why Multiple examples, alternative approaches Making Connections No instruction or technical description","title":"What Matters?"},{"location":"About/format/#references","text":"Technical descriptions and how to operate it.","title":"References"},{"location":"About/format/#what-matters_3","text":"Structure Consistency Description Accuracy","title":"What Matters?"},{"location":"dev/Languages/csharp/","text":"C Tutorials How-to Guides Ergo with C# 101 Explanations References","title":"C#"},{"location":"dev/Languages/csharp/#c","text":"","title":"C"},{"location":"dev/Languages/csharp/#tutorials","text":"","title":"Tutorials"},{"location":"dev/Languages/csharp/#how-to-guides","text":"Ergo with C# 101","title":"How-to Guides"},{"location":"dev/Languages/csharp/#explanations","text":"","title":"Explanations"},{"location":"dev/Languages/csharp/#references","text":"","title":"References"},{"location":"dev/Languages/java/","text":"Tutorials See AppKit How-to Guides See AppKit Explanations See AppKit See ErgoScript References","title":"Java"},{"location":"dev/Languages/java/#tutorials","text":"See AppKit","title":"Tutorials"},{"location":"dev/Languages/java/#how-to-guides","text":"See AppKit","title":"How-to Guides"},{"location":"dev/Languages/java/#explanations","text":"See AppKit See ErgoScript","title":"Explanations"},{"location":"dev/Languages/java/#references","text":"","title":"References"},{"location":"dev/Languages/rust/","text":"Rust sigma-rust is an alternative and simple implementation of ErgoTree interpreter and transaction building tools. The goal for the Rust version is to be on par with Scala version feature-wise. Now Rust version is still significantly behind. Also the goal for the Rust version is to have bindings for web, iOS and Android. The Scala version will continue to be the primary choice for JVM ecosystem with Rust version covering the rest. A list of \" good first \" issues is available on GitHub - @greenhat on Discord is ready to assist anyone who is interested. Ergo Utilities | simplify writing off-chain code in Rust. This document describes the high-level architecture of ErgoScript compiler and ErgoTree interpreter. To get better understanding on how to use it in your project check out how its being used in the following projects: Ergo Headless dApp Framework ; Ergo Node Interface Library ; Oracle Core ; AgeUSD Stablecoin Protocol ; Ergo SDK (Wasm bindings); Yoroi wallet (Wasm bindings); Ergo Desktop Wallet (Wasm bindings); Also take a look at tests where various usage scenarios were implemented.","title":"Rust"},{"location":"dev/Languages/rust/#rust","text":"sigma-rust is an alternative and simple implementation of ErgoTree interpreter and transaction building tools. The goal for the Rust version is to be on par with Scala version feature-wise. Now Rust version is still significantly behind. Also the goal for the Rust version is to have bindings for web, iOS and Android. The Scala version will continue to be the primary choice for JVM ecosystem with Rust version covering the rest. A list of \" good first \" issues is available on GitHub - @greenhat on Discord is ready to assist anyone who is interested. Ergo Utilities | simplify writing off-chain code in Rust. This document describes the high-level architecture of ErgoScript compiler and ErgoTree interpreter. To get better understanding on how to use it in your project check out how its being used in the following projects: Ergo Headless dApp Framework ; Ergo Node Interface Library ; Oracle Core ; AgeUSD Stablecoin Protocol ; Ergo SDK (Wasm bindings); Yoroi wallet (Wasm bindings); Ergo Desktop Wallet (Wasm bindings); Also take a look at tests where various usage scenarios were implemented.","title":"Rust"},{"location":"dev/Languages/scala/","text":"Scala Ergo's primary language is Scala. Similarily, the scripting language used by ergo - ergoscript , is based on Scala. Learn Tutorials, How to Guides and Explanations found in the relevent sections - See ErgoScript - See AppKit References Sigmastate-Interpreter | The Sigmastate-Interpreter is a ErgoScript compiler and ErgoTree Interpreter implementation for Ergo blockchain's Sigma Language For development of Ergo applications using JVM languages a better alternative is to use Appkit . ScoreX , the open-source, modular blockchain & cryptocurrency framework. Scrypto | Scrypto is an open source cryptographic toolkit designed to make it easier and safer for developers to use cryptography in their applications based on Scorex This library is used internally in Ergo Node and ergo-wallet , the public interfaces are subject to change.","title":"Scala"},{"location":"dev/Languages/scala/#scala","text":"Ergo's primary language is Scala. Similarily, the scripting language used by ergo - ergoscript , is based on Scala.","title":"Scala"},{"location":"dev/Languages/scala/#learn","text":"Tutorials, How to Guides and Explanations found in the relevent sections - See ErgoScript - See AppKit","title":"Learn"},{"location":"dev/Languages/scala/#references","text":"Sigmastate-Interpreter | The Sigmastate-Interpreter is a ErgoScript compiler and ErgoTree Interpreter implementation for Ergo blockchain's Sigma Language For development of Ergo applications using JVM languages a better alternative is to use Appkit . ScoreX , the open-source, modular blockchain & cryptocurrency framework. Scrypto | Scrypto is an open source cryptographic toolkit designed to make it easier and safer for developers to use cryptography in their applications based on Scorex This library is used internally in Ergo Node and ergo-wallet , the public interfaces are subject to change.","title":"References"},{"location":"dev/stack/back-end/","text":"Back-end This page provides an overview of the tools used to interact with the Ergo blockchain. Developers can use these tools to read data from the blockchain, compute using that data and optionally create transactions to be broadcast. Each tool requires the developer to \"program\" in some language. Users of AppKit will usually write Scala code (although AppKit supports many other languages). HDF users will need to write Rust code. JDE users will have to write JSON. JDE Ergo JDE Tutorials How-to Guides Example: Minting Reserve Coins Writing JDE Scripts Using the web service Explanations References Sample Scripts Syntax Headless dApp Framework Ergo Headless dApp Framework . The premier Rust framework for developing Ergo Headless dApps. The Ergo HDF provides developers with the very first portable UTXO-based headless dApp development framework on any blockchain. Tutorials Math Bounty Headless dApp - Getting Started Writing Your First Action Math Bounty Headless dApp - Finishing The Headless dApp Math Bounty Headless dApp - Writing A CLI Frontend For Creating Bounties Explanations Understanding The Ergo Headless dApp Framework Appkit AppKit provides methods for the following Fetch data from Ergo Explorer API Interact with Ergo Node, both public and private methods Build transactions and sign them Helper methods to handle cryptographics like calculating PK addresses from secrets Appkit: A Library for Polyglot Development of Ergo Applications has an idiomatic Java API and is written in Java/Scala. It is a thin wrapper around core components provided by the ErgoScript interpreter and Ergo protocol implementations which are written in Scala. It is published on maven repository and cross compiled to both Java 7 and Java 8+ jars. Using Appkit Ergo applications can be written in one of the languages supported by GraalVM (i.e. Java, JavaScript, C/C++, Python, Ruby, R) and using this library applications can communicate with Ergo nodes via unified API and programming model provided by Appkit. In addition Appkit based Ergo applications can be compiled into native code using native-image ahead of time compiler and then executed without Java VM with very fast startup time and lower runtime memory overhead compared to a Java VM. This is attractive option for high-performance low-latency microservices. Tutorials Tutorial starting with Appkit on Gradle projects AppKit by Example (Video) Appkit Examples How-to Guides Ergo Android | Example Android application which demonstrates how Ergo Appkit can be used to develop Ergo applications running on Android. Explanations AppKit Introduction . References ErgoTool | A Command Line Interface for Ergo based on Appkit and GraalVM native-image. Read the introduction and overview .","title":"Backend"},{"location":"dev/stack/back-end/#back-end","text":"This page provides an overview of the tools used to interact with the Ergo blockchain. Developers can use these tools to read data from the blockchain, compute using that data and optionally create transactions to be broadcast. Each tool requires the developer to \"program\" in some language. Users of AppKit will usually write Scala code (although AppKit supports many other languages). HDF users will need to write Rust code. JDE users will have to write JSON.","title":"Back-end"},{"location":"dev/stack/back-end/#jde","text":"Ergo JDE","title":"JDE"},{"location":"dev/stack/back-end/#tutorials","text":"","title":"Tutorials"},{"location":"dev/stack/back-end/#how-to-guides","text":"Example: Minting Reserve Coins Writing JDE Scripts Using the web service","title":"How-to Guides"},{"location":"dev/stack/back-end/#explanations","text":"","title":"Explanations"},{"location":"dev/stack/back-end/#references","text":"Sample Scripts Syntax","title":"References"},{"location":"dev/stack/back-end/#headless-dapp-framework","text":"Ergo Headless dApp Framework . The premier Rust framework for developing Ergo Headless dApps. The Ergo HDF provides developers with the very first portable UTXO-based headless dApp development framework on any blockchain.","title":"Headless dApp Framework"},{"location":"dev/stack/back-end/#tutorials_1","text":"Math Bounty Headless dApp - Getting Started Writing Your First Action Math Bounty Headless dApp - Finishing The Headless dApp Math Bounty Headless dApp - Writing A CLI Frontend For Creating Bounties","title":"Tutorials"},{"location":"dev/stack/back-end/#explanations_1","text":"Understanding The Ergo Headless dApp Framework","title":"Explanations"},{"location":"dev/stack/back-end/#appkit","text":"AppKit provides methods for the following Fetch data from Ergo Explorer API Interact with Ergo Node, both public and private methods Build transactions and sign them Helper methods to handle cryptographics like calculating PK addresses from secrets Appkit: A Library for Polyglot Development of Ergo Applications has an idiomatic Java API and is written in Java/Scala. It is a thin wrapper around core components provided by the ErgoScript interpreter and Ergo protocol implementations which are written in Scala. It is published on maven repository and cross compiled to both Java 7 and Java 8+ jars. Using Appkit Ergo applications can be written in one of the languages supported by GraalVM (i.e. Java, JavaScript, C/C++, Python, Ruby, R) and using this library applications can communicate with Ergo nodes via unified API and programming model provided by Appkit. In addition Appkit based Ergo applications can be compiled into native code using native-image ahead of time compiler and then executed without Java VM with very fast startup time and lower runtime memory overhead compared to a Java VM. This is attractive option for high-performance low-latency microservices.","title":"Appkit"},{"location":"dev/stack/back-end/#tutorials_2","text":"Tutorial starting with Appkit on Gradle projects AppKit by Example (Video) Appkit Examples","title":"Tutorials"},{"location":"dev/stack/back-end/#how-to-guides_1","text":"Ergo Android | Example Android application which demonstrates how Ergo Appkit can be used to develop Ergo applications running on Android.","title":"How-to Guides"},{"location":"dev/stack/back-end/#explanations_2","text":"AppKit Introduction .","title":"Explanations"},{"location":"dev/stack/back-end/#references_1","text":"ErgoTool | A Command Line Interface for Ergo based on Appkit and GraalVM native-image. Read the introduction and overview .","title":"References"},{"location":"dev/stack/ergoscript/","text":"Learn Tutorials (Video) Learn ErgoScript By Example Via The Ergo Playground with Robert Kornacki Advanced ErgoScript Tutorial ErgoScript tutorial How-to Guides Explanations ErgoScript Design patterns SigmaState Protocols References Proxy Contracts Decentralisation Transaction Chaining Address","title":"ErgoScript"},{"location":"dev/stack/ergoscript/#learn","text":"","title":"Learn"},{"location":"dev/stack/ergoscript/#tutorials","text":"(Video) Learn ErgoScript By Example Via The Ergo Playground with Robert Kornacki Advanced ErgoScript Tutorial ErgoScript tutorial","title":"Tutorials"},{"location":"dev/stack/ergoscript/#how-to-guides","text":"","title":"How-to Guides"},{"location":"dev/stack/ergoscript/#explanations","text":"ErgoScript Design patterns SigmaState Protocols","title":"Explanations"},{"location":"dev/stack/ergoscript/#references","text":"","title":"References"},{"location":"dev/stack/ergoscript/#proxy-contracts","text":"","title":"Proxy Contracts"},{"location":"dev/stack/ergoscript/#decentralisation","text":"","title":"Decentralisation"},{"location":"dev/stack/ergoscript/#transaction-chaining","text":"","title":"Transaction Chaining"},{"location":"dev/stack/ergoscript/#address","text":"","title":"Address"},{"location":"dev/stack/front-end/","text":"Front-end Ergo JS Template The Ergo JS Template aims to serve as an entry point to Ergo dApp Development Bootstrapped with Create React App. It contains ergo-ts and ergo-lib libraries as dependencies and some examples to present how to use these libraries. Explanations The following examples can be seen on the Ergo JS Template repository Interacting with the explorer Encoding different data types Decoding fields (registers) of tokens References ergo-ts with support of tokens and complex transactions ergo-js with basic transaction operations Other Examples hypo10use/quid-games (Angular) Raffle","title":"Frontend"},{"location":"dev/stack/front-end/#front-end","text":"","title":"Front-end"},{"location":"dev/stack/front-end/#ergo-js-template","text":"The Ergo JS Template aims to serve as an entry point to Ergo dApp Development Bootstrapped with Create React App. It contains ergo-ts and ergo-lib libraries as dependencies and some examples to present how to use these libraries.","title":"Ergo JS Template"},{"location":"dev/stack/front-end/#explanations","text":"The following examples can be seen on the Ergo JS Template repository Interacting with the explorer Encoding different data types Decoding fields (registers) of tokens","title":"Explanations"},{"location":"dev/stack/front-end/#references","text":"ergo-ts with support of tokens and complex transactions ergo-js with basic transaction operations","title":"References"},{"location":"dev/stack/front-end/#other-examples","text":"hypo10use/quid-games (Angular) Raffle","title":"Other Examples"},{"location":"dev/start/dApp-dev/","text":"dApp Development For most developers, Appkit is the best entry point unless you're wanting to dive straight into ErgoScript smart-contract development. System Architecture Below is a example system architecture diagram highlighting the main components of a decentralised application (dApp) Front-end | The user-interface built in your framework of choice. For payments, we have the Yoroi dApp connector, proxy contracts, or Ergo-Pay. REST | A REST ful API to interact with the backend Backend | Perform the off-chain logic Database (Optional) Contract | Where the magic happens, the on-chain validation of the off-chain logic. Explorer Explorer Mainnet explorer Testnet Testnet explorer Using Ergo-Testnet Testnet Faucet API API Docs Node API Explorer API Misc. Resources Test vectors: Ergo transaction serialization Signature scheme Utilities Miner rewards script | Simple command-line tool to find miner rewards not spent and form withdrawing transaction requests for them Ergo P2S Playground | A web-based tool to quickly get the address corresponding to some script Resources ErgoWiki | The official ergoplatform GitHub wiki ergosites.github.io | Resource page which links to various websites and utilities. ergohack.io | Your introduction to developing on Ergo.","title":"dApp Development"},{"location":"dev/start/dApp-dev/#dapp-development","text":"For most developers, Appkit is the best entry point unless you're wanting to dive straight into ErgoScript smart-contract development. System Architecture Below is a example system architecture diagram highlighting the main components of a decentralised application (dApp) Front-end | The user-interface built in your framework of choice. For payments, we have the Yoroi dApp connector, proxy contracts, or Ergo-Pay. REST | A REST ful API to interact with the backend Backend | Perform the off-chain logic Database (Optional) Contract | Where the magic happens, the on-chain validation of the off-chain logic.","title":"dApp Development"},{"location":"dev/start/dApp-dev/#explorer","text":"Explorer Mainnet explorer","title":"Explorer"},{"location":"dev/start/dApp-dev/#testnet","text":"Testnet explorer Using Ergo-Testnet Testnet Faucet","title":"Testnet"},{"location":"dev/start/dApp-dev/#api","text":"API Docs Node API Explorer API","title":"API"},{"location":"dev/start/dApp-dev/#misc-resources","text":"Test vectors: Ergo transaction serialization Signature scheme Utilities Miner rewards script | Simple command-line tool to find miner rewards not spent and form withdrawing transaction requests for them Ergo P2S Playground | A web-based tool to quickly get the address corresponding to some script Resources ErgoWiki | The official ergoplatform GitHub wiki ergosites.github.io | Resource page which links to various websites and utilities. ergohack.io | Your introduction to developing on Ergo.","title":"Misc. Resources"},{"location":"dev/start/start/","text":"Where to start? The dApp Development page provides a broad overview on creating your first decentralised app. See the Back End page for an overview of the tools available to interact with the blockchain. This is also broken down on a per-language basis.","title":"Where to start?"},{"location":"dev/start/start/#where-to-start","text":"The dApp Development page provides a broad overview on creating your first decentralised app. See the Back End page for an overview of the tools available to interact with the blockchain. This is also broken down on a per-language basis.","title":"Where to start?"},{"location":"dev/start/tutorials/","text":"Basic Tutorials ergotutorials.com Ergo API basic query Create mini web for your NFT.","title":"Introductionary Tutorials"},{"location":"dev/start/tutorials/#basic-tutorials","text":"ergotutorials.com Ergo API basic query Create mini web for your NFT.","title":"Basic Tutorials"},{"location":"miners/mining/","text":"","title":"Mining"}]}