{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Ergo Platform Documentation Documentation is split into four distinct categories. Tutorials How-To Guides Explanations References Test TestTest Test Test","title":"Home"},{"location":"#test","text":"","title":"Test"},{"location":"#testtest","text":"","title":"TestTest"},{"location":"#test_1","text":"","title":"Test"},{"location":"#test_2","text":"","title":"Test"},{"location":"Format/explanations/","text":"Explanations Understanding-orientated Explanations that clarify and illuminate a particular topic What Matters? Giving context Explaning why Multiple examples, alternative approaches Making Connections No instruction or technical description","title":"Explanations"},{"location":"Format/explanations/#explanations","text":"Understanding-orientated Explanations that clarify and illuminate a particular topic","title":"Explanations"},{"location":"Format/explanations/#what-matters","text":"Giving context Explaning why Multiple examples, alternative approaches Making Connections No instruction or technical description","title":"What Matters?"},{"location":"Format/howto/","text":"Tutorials What is a How To Guide? problem-oriented. Guides that take the user through a series of steps to achieve a common problem. What matters? A series of steps A focus on the goal Addressing a specific question A little flexibility Practical usability Good naming How-to Guides starting with Appkit on Gradle projects Ergo with C# 101","title":"Tutorials"},{"location":"Format/howto/#tutorials","text":"","title":"Tutorials"},{"location":"Format/howto/#what-is-a-how-to-guide","text":"problem-oriented. Guides that take the user through a series of steps to achieve a common problem.","title":"What is a How To Guide?"},{"location":"Format/howto/#what-matters","text":"A series of steps A focus on the goal Addressing a specific question A little flexibility Practical usability Good naming","title":"What matters?"},{"location":"Format/howto/#how-to-guides","text":"starting with Appkit on Gradle projects Ergo with C# 101","title":"How-to Guides"},{"location":"Format/references/","text":"References Technical descriptions and how to operate it. What Matters? Structure Consistency Description Accuracy","title":"References"},{"location":"Format/references/#references","text":"Technical descriptions and how to operate it.","title":"References"},{"location":"Format/references/#what-matters","text":"Structure Consistency Description Accuracy","title":"What Matters?"},{"location":"Format/tutorials/","text":"Tutorials What is a tutorial? learning-oriented. Tutorial are lessons that take the reader by the hand through a series of steps to complete a project. Most important part of documentation, rarely done well. What matters? Learn by doing. Getting Started Inspiring Confidence Repeatability Immediate sense of achievement Concreteness, not abstraction Minimum necessary explanation No distractions Tutorials Introduction ergotutorials.com Ergo API basic query Create mini web for your NFT. Intermediate Appkit by Example Appkit Examples (Video) Learn ErgoScript By Example Via The Ergo Playground with Robert Kornacki Advanced Advanced ErgoScript Tutorial ErgoScript tutorial ErgoScript Design patterns SigmaState Protocols","title":"Tutorials"},{"location":"Format/tutorials/#tutorials","text":"","title":"Tutorials"},{"location":"Format/tutorials/#what-is-a-tutorial","text":"learning-oriented. Tutorial are lessons that take the reader by the hand through a series of steps to complete a project. Most important part of documentation, rarely done well.","title":"What is a tutorial?"},{"location":"Format/tutorials/#what-matters","text":"Learn by doing. Getting Started Inspiring Confidence Repeatability Immediate sense of achievement Concreteness, not abstraction Minimum necessary explanation No distractions","title":"What matters?"},{"location":"Format/tutorials/#tutorials_1","text":"","title":"Tutorials"},{"location":"Format/tutorials/#introduction","text":"ergotutorials.com Ergo API basic query Create mini web for your NFT.","title":"Introduction"},{"location":"Format/tutorials/#intermediate","text":"Appkit by Example Appkit Examples (Video) Learn ErgoScript By Example Via The Ergo Playground with Robert Kornacki","title":"Intermediate"},{"location":"Format/tutorials/#advanced","text":"Advanced ErgoScript Tutorial ErgoScript tutorial ErgoScript Design patterns SigmaState Protocols","title":"Advanced"},{"location":"Getting%20Started/getting-started/","text":"Getting Started For most developers, Appkit is the best entry point unless you're wanting to dive straight into ErgoScript smart-contract development. System Architecture Below is a example system architecture diagram highlighting the main components of a decentralised application (dApp) Front-end | The user-interface built in your framework of choice. For payments, we have the Yoroi dApp connector, proxy contracts, or Ergo-Pay. REST | A REST ful API to interact with the backend Backend | Perform the off-chain logic Database (Optional) Contract | Where the magic happens, the on-chain validation of the off-chain logic. Explorer Explorer Mainnet explorer Testnet Testnet explorer Using Ergo-Testnet Testnet Faucet API API Docs Node API Explorer API Misc. Resources Test vectors: Ergo transaction serialization Signature scheme Utilities Miner rewards script | Simple command-line tool to find miner rewards not spent and form withdrawing transaction requests for them Ergo P2S Playground | A web-based tool to quickly get the address corresponding to some script Resources ErgoWiki | The official ergoplatform GitHub wiki ergosites.github.io | Resource page which links to various websites and utilities. ergohack.io | Your introduction to developing on Ergo.","title":"Getting Started"},{"location":"Getting%20Started/getting-started/#getting-started","text":"For most developers, Appkit is the best entry point unless you're wanting to dive straight into ErgoScript smart-contract development. System Architecture Below is a example system architecture diagram highlighting the main components of a decentralised application (dApp) Front-end | The user-interface built in your framework of choice. For payments, we have the Yoroi dApp connector, proxy contracts, or Ergo-Pay. REST | A REST ful API to interact with the backend Backend | Perform the off-chain logic Database (Optional) Contract | Where the magic happens, the on-chain validation of the off-chain logic.","title":"Getting Started"},{"location":"Getting%20Started/getting-started/#explorer","text":"Explorer Mainnet explorer","title":"Explorer"},{"location":"Getting%20Started/getting-started/#testnet","text":"Testnet explorer Using Ergo-Testnet Testnet Faucet","title":"Testnet"},{"location":"Getting%20Started/getting-started/#api","text":"API Docs Node API Explorer API","title":"API"},{"location":"Getting%20Started/getting-started/#misc-resources","text":"Test vectors: Ergo transaction serialization Signature scheme Utilities Miner rewards script | Simple command-line tool to find miner rewards not spent and form withdrawing transaction requests for them Ergo P2S Playground | A web-based tool to quickly get the address corresponding to some script Resources ErgoWiki | The official ergoplatform GitHub wiki ergosites.github.io | Resource page which links to various websites and utilities. ergohack.io | Your introduction to developing on Ergo.","title":"Misc. Resources"},{"location":"Stack/back-end/","text":"Back-end This page provides an overview of the tools used to interact with the Ergo blockchain. Developers can use these tools to read data from the blockchain, compute using that data and optionally create transactions to be broadcast. Each tool requires the developer to \"program\" in some language. Users of AppKit will usually write Scala code (although AppKit supports many other languages). HDF users will need to write Rust code. JDE users will have to write JSON. JDE Ergo JDE Tutorials How-to Guides Example: Minting Reserve Coins Writing JDE Scripts Using the web service Explanations References Sample Scripts Syntax Headless dApp Framework Ergo Headless dApp Framework . The premier Rust framework for developing Ergo Headless dApps. The Ergo HDF provides developers with the very first portable UTXO-based headless dApp development framework on any blockchain. Tutorials Math Bounty Headless dApp - Getting Started Writing Your First Action Math Bounty Headless dApp - Finishing The Headless dApp Math Bounty Headless dApp - Writing A CLI Frontend For Creating Bounties Explanations Understanding The Ergo Headless dApp Framework Appkit AppKit provides methods for the following Fetch data from Ergo Explorer API Interact with Ergo Node, both public and private methods Build transactions and sign them Helper methods to handle cryptographics like calculating PK addresses from secrets Appkit: A Library for Polyglot Development of Ergo Applications has an idiomatic Java API and is written in Java/Scala. It is a thin wrapper around core components provided by the ErgoScript interpreter and Ergo protocol implementations which are written in Scala. It is published on maven repository and cross compiled to both Java 7 and Java 8+ jars. Using Appkit Ergo applications can be written in one of the languages supported by GraalVM (i.e. Java, JavaScript, C/C++, Python, Ruby, R) and using this library applications can communicate with Ergo nodes via unified API and programming model provided by Appkit. In addition Appkit based Ergo applications can be compiled into native code using native-image ahead of time compiler and then executed without Java VM with very fast startup time and lower runtime memory overhead compared to a Java VM. This is attractive option for high-performance low-latency microservices. Tutorials Tutorial starting with Appkit on Gradle projects AppKit by Example (Video) Appkit Examples How-to Guides Ergo Android | Example Android application which demonstrates how Ergo Appkit can be used to develop Ergo applications running on Android. Explanations AppKit Introduction . References ErgoTool | A Command Line Interface for Ergo based on Appkit and GraalVM native-image. Read the introduction and overview .","title":"Back-end"},{"location":"Stack/back-end/#back-end","text":"This page provides an overview of the tools used to interact with the Ergo blockchain. Developers can use these tools to read data from the blockchain, compute using that data and optionally create transactions to be broadcast. Each tool requires the developer to \"program\" in some language. Users of AppKit will usually write Scala code (although AppKit supports many other languages). HDF users will need to write Rust code. JDE users will have to write JSON.","title":"Back-end"},{"location":"Stack/back-end/#jde","text":"Ergo JDE","title":"JDE"},{"location":"Stack/back-end/#tutorials","text":"","title":"Tutorials"},{"location":"Stack/back-end/#how-to-guides","text":"Example: Minting Reserve Coins Writing JDE Scripts Using the web service","title":"How-to Guides"},{"location":"Stack/back-end/#explanations","text":"","title":"Explanations"},{"location":"Stack/back-end/#references","text":"Sample Scripts Syntax","title":"References"},{"location":"Stack/back-end/#headless-dapp-framework","text":"Ergo Headless dApp Framework . The premier Rust framework for developing Ergo Headless dApps. The Ergo HDF provides developers with the very first portable UTXO-based headless dApp development framework on any blockchain.","title":"Headless dApp Framework"},{"location":"Stack/back-end/#tutorials_1","text":"Math Bounty Headless dApp - Getting Started Writing Your First Action Math Bounty Headless dApp - Finishing The Headless dApp Math Bounty Headless dApp - Writing A CLI Frontend For Creating Bounties","title":"Tutorials"},{"location":"Stack/back-end/#explanations_1","text":"Understanding The Ergo Headless dApp Framework","title":"Explanations"},{"location":"Stack/back-end/#appkit","text":"AppKit provides methods for the following Fetch data from Ergo Explorer API Interact with Ergo Node, both public and private methods Build transactions and sign them Helper methods to handle cryptographics like calculating PK addresses from secrets Appkit: A Library for Polyglot Development of Ergo Applications has an idiomatic Java API and is written in Java/Scala. It is a thin wrapper around core components provided by the ErgoScript interpreter and Ergo protocol implementations which are written in Scala. It is published on maven repository and cross compiled to both Java 7 and Java 8+ jars. Using Appkit Ergo applications can be written in one of the languages supported by GraalVM (i.e. Java, JavaScript, C/C++, Python, Ruby, R) and using this library applications can communicate with Ergo nodes via unified API and programming model provided by Appkit. In addition Appkit based Ergo applications can be compiled into native code using native-image ahead of time compiler and then executed without Java VM with very fast startup time and lower runtime memory overhead compared to a Java VM. This is attractive option for high-performance low-latency microservices.","title":"Appkit"},{"location":"Stack/back-end/#tutorials_2","text":"Tutorial starting with Appkit on Gradle projects AppKit by Example (Video) Appkit Examples","title":"Tutorials"},{"location":"Stack/back-end/#how-to-guides_1","text":"Ergo Android | Example Android application which demonstrates how Ergo Appkit can be used to develop Ergo applications running on Android.","title":"How-to Guides"},{"location":"Stack/back-end/#explanations_2","text":"AppKit Introduction .","title":"Explanations"},{"location":"Stack/back-end/#references_1","text":"ErgoTool | A Command Line Interface for Ergo based on Appkit and GraalVM native-image. Read the introduction and overview .","title":"References"},{"location":"Stack/ergoscript/","text":"Tutorials Advanced ErgoScript Tutorial ErgoScript tutorial (Video) Learn ErgoScript By Example Via The Ergo Playground with Robert Kornacki How-to Guides Explanations ErgoScript Design patterns SigmaState Protocols References","title":"Ergoscript"},{"location":"Stack/ergoscript/#tutorials","text":"Advanced ErgoScript Tutorial ErgoScript tutorial (Video) Learn ErgoScript By Example Via The Ergo Playground with Robert Kornacki","title":"Tutorials"},{"location":"Stack/ergoscript/#how-to-guides","text":"","title":"How-to Guides"},{"location":"Stack/ergoscript/#explanations","text":"ErgoScript Design patterns SigmaState Protocols","title":"Explanations"},{"location":"Stack/ergoscript/#references","text":"","title":"References"},{"location":"Stack/front-end/","text":"Front-end Ergo JS Template Entry Point to Ergo dApp Development Ergo JS Template Tutorials How-to Guides Explanations Interacting with the explorer Encoding different data types Decoding fields (registers) of tokens References ergo-ts with support of tokens and complex transactions ergo-js with basic transaction operations hypo10use/quid-games Raffle","title":"Front-end"},{"location":"Stack/front-end/#front-end","text":"","title":"Front-end"},{"location":"Stack/front-end/#ergo-js-template","text":"Entry Point to Ergo dApp Development Ergo JS Template","title":"Ergo JS Template"},{"location":"Stack/front-end/#tutorials","text":"","title":"Tutorials"},{"location":"Stack/front-end/#how-to-guides","text":"","title":"How-to Guides"},{"location":"Stack/front-end/#explanations","text":"Interacting with the explorer Encoding different data types Decoding fields (registers) of tokens","title":"Explanations"},{"location":"Stack/front-end/#references","text":"ergo-ts with support of tokens and complex transactions ergo-js with basic transaction operations hypo10use/quid-games Raffle","title":"References"}]}